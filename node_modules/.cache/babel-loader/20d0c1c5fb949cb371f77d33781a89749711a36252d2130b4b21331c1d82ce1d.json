{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);// Default to false\nconst[user,setUser]=useState(null);// To store user data if needed\n// In a real app, you'd check localStorage or a token here on mount\nuseEffect(()=>{const token=localStorage.getItem('token');if(token){// Here you would typically validate the token with your backend\n// For now, we'll just assume if a token exists, the user is authenticated\nsetIsAuthenticated(true);// You might also decode the token to get user info or fetch user data\nsetUser({username:'Guest'});// Placeholder user\n}},[]);const login=(token,userData)=>{localStorage.setItem('token',token);setIsAuthenticated(true);setUser(userData);};const logout=()=>{localStorage.removeItem('token');setIsAuthenticated(false);setUser(null);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,user,login,logout},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","user","setUser","token","localStorage","getItem","username","login","userData","setItem","logout","removeItem","Provider","value"],"sources":["C:/Users/vansh patel/OneDrive/Desktop/study/sem5/projects/finaurial/finaurial/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Default to false\n  const [user, setUser] = useState(null); // To store user data if needed\n\n  // In a real app, you'd check localStorage or a token here on mount\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Here you would typically validate the token with your backend\n      // For now, we'll just assume if a token exists, the user is authenticated\n      setIsAuthenticated(true);\n      // You might also decode the token to get user info or fetch user data\n      setUser({ username: 'Guest' }); // Placeholder user\n    }\n  }, []);\n\n  const login = (token, userData) => {\n    localStorage.setItem('token', token);\n    setIsAuthenticated(true);\n    setUser(userData);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAElE,MAAO,MAAM,CAAAC,WAAW,cAAGL,aAAa,CAAC,IAAI,CAAC,CAE9C,MAAO,MAAM,CAAAM,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAAE;AAC/D,KAAM,CAACU,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAAE;AAExC;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACT;AACA;AACAH,kBAAkB,CAAC,IAAI,CAAC,CACxB;AACAE,OAAO,CAAC,CAAEI,QAAQ,CAAE,OAAQ,CAAC,CAAC,CAAE;AAClC,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,KAAK,CAAGA,CAACJ,KAAK,CAAEK,QAAQ,GAAK,CACjCJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAEN,KAAK,CAAC,CACpCH,kBAAkB,CAAC,IAAI,CAAC,CACxBE,OAAO,CAACM,QAAQ,CAAC,CACnB,CAAC,CAED,KAAM,CAAAE,MAAM,CAAGA,CAAA,GAAM,CACnBN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC,CAChCX,kBAAkB,CAAC,KAAK,CAAC,CACzBE,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED,mBACER,IAAA,CAACC,WAAW,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEd,eAAe,CAAEE,IAAI,CAAEM,KAAK,CAAEG,MAAO,CAAE,CAAAZ,QAAA,CACnEA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}