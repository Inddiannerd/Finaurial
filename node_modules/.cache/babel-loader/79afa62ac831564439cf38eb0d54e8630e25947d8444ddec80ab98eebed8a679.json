{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vansh patel\\\\OneDrive\\\\Desktop\\\\study\\\\sem5\\\\projects\\\\finaurial\\\\finaurial\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      try {\n        const decoded = jwtDecode(storedToken);\n        // Check if token is expired\n        if (decoded.exp * 1000 < Date.now()) {\n          logout(); // Use logout to clear everything\n        } else {\n          setToken(storedToken);\n          setUser(decoded.user);\n        }\n      } catch (error) {\n        console.error('Invalid token on initial load', error);\n        logout(); // Clear invalid token\n      }\n    }\n  }, []);\n  const login = newToken => {\n    try {\n      const decoded = jwtDecode(newToken);\n      localStorage.setItem('token', newToken);\n      setToken(newToken);\n      setUser(decoded.user);\n    } catch (error) {\n      console.error('Failed to decode new token on login', error);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"UvLavRp3/7IS3BV+qychR+/n58k=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","token","setToken","localStorage","getItem","user","setUser","storedToken","decoded","exp","Date","now","logout","error","console","login","newToken","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/vansh patel/OneDrive/Desktop/study/sem5/projects/finaurial/finaurial/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { jwtDecode } from 'jwt-decode';\n\nexport const AuthContext = createContext(null);\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      try {\n        const decoded = jwtDecode(storedToken);\n        // Check if token is expired\n        if (decoded.exp * 1000 < Date.now()) {\n          logout(); // Use logout to clear everything\n        } else {\n          setToken(storedToken);\n          setUser(decoded.user);\n        }\n      } catch (error) {\n        console.error('Invalid token on initial load', error);\n        logout(); // Clear invalid token\n      }\n    }\n  }, []);\n\n  const login = (newToken) => {\n    try {\n      const decoded = jwtDecode(newToken);\n      localStorage.setItem('token', newToken);\n      setToken(newToken);\n      setUser(decoded.user);\n    } catch (error) {\n      console.error('Failed to decode new token on login', error);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAE9C,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMiB,WAAW,GAAGJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIG,WAAW,EAAE;MACf,IAAI;QACF,MAAMC,OAAO,GAAGhB,SAAS,CAACe,WAAW,CAAC;QACtC;QACA,IAAIC,OAAO,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACnCC,MAAM,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,MAAM;UACLV,QAAQ,CAACK,WAAW,CAAC;UACrBD,OAAO,CAACE,OAAO,CAACH,IAAI,CAAC;QACvB;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDD,MAAM,CAAC,CAAC,CAAC,CAAC;MACZ;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,KAAK,GAAIC,QAAQ,IAAK;IAC1B,IAAI;MACF,MAAMR,OAAO,GAAGhB,SAAS,CAACwB,QAAQ,CAAC;MACnCb,YAAY,CAACc,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;MACvCd,QAAQ,CAACc,QAAQ,CAAC;MAClBV,OAAO,CAACE,OAAO,CAACH,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;EAED,MAAMD,MAAM,GAAGA,CAAA,KAAM;IACnBT,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChChB,QAAQ,CAAC,IAAI,CAAC;IACdI,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,KAAK;MAAEI,IAAI;MAAEU,KAAK;MAAEH;IAAO,CAAE;IAAAb,QAAA,EACzDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxB,GAAA,CA7CWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}